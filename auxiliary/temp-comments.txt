Add something to write_model such that the code has a ggsave statement at the end to save model plot to png file. That could be commented out by default.
If possible, specification to ggsave or for plotting should be such that figure is saved that doesn't contain much whitespace, i.e. cropped tight.

Also maybe switch from print() to plot() statement at end, seems more suitable.

Thoughts on diagram_list. Would it be hard to change the to/from columns to show labels instead of numbers? I.e. instead of from 1 to 4 it would have S and R in there. Labels are unique, so we should be ok doing that.
If complicated inside the code, one could still convert from label to number using the $nodes info, but users would see labels in to and from edge entries, so they can more easily hone in on the ones that need adjustment.

See more notes that need addressing in the "Non model diagram" vignette in the "Notes of things that need adressing" section.


### Suggested additions/edits to check_model_list ###

Move all model_list checks into check_model_list function. E.g. move the snippets of code that check the varlocation matrix and the ckeck_nodes_matrix function into check_model_list.

Check that naming of variables and flows follows the rules. Code for that can be borrowed/shared with modelbuilder.

Overall, I'd prefer if somehow the model checking functionality is not duplicated between flowdiagramr and modelbuilder. We'll make flowdiagramr a depedency for modelbuilder, so the checking function could be in flowdiagramr and then be used by modelbuilder. That means a function check_model_list or check_model needs to be general enough to process both mbmodel or model_list. Or one could have 2 functions called check_model_list and check_mbmodel and each of them call another function that checks the shared parts, namely the full naming convention and such. See check_model in modelbuilder for some additional logic. We can discuss how to do this best.

Maybe worth making check_model_list an exported/public function? This way users can, if they wanted, run their model through the checker, independent of prepare_diagram. Not sure exactly why they'd want to do that, but in general I prefer to expose/make public as much of the functionality as makes sense. Who knows what kind of uses some users might have for it, if it's hidden/non-exported it's harder for them to use.
