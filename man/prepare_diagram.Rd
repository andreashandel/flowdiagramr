% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_diagram.R
\name{prepare_diagram}
\alias{prepare_diagram}
\title{Create data frames for plotting from model elements.}
\usage{
prepare_diagram(input_list, nodes_df = NULL)
}
\arguments{
\item{input_list}{A list of model elements. The list must contain at least
two elements with names \code{varlabels} and \code{flows}. The
\code{flows} list must contain a sub-list for each variable in
the \code{varlabels} vector. For example, if the user specifies
two variables in \code{input_list$varlabels}, then
\code{input_list$flows} must contain two sub-lists, each containing
a character vector of flows into and out of the node. Currently,
this function assumes that the \code{input_list$varlabels} sub-lists
are in the same order as the \code{input_list$varlabels} vector. See
examples. The \code{input_list} can contain any other elements that
the user might deem useful (e.g., metadata/comments), but only the
\code{varlabels} and \code{flows} are used by this function.}

\item{nodes_df}{A data frame with user-specified node locations. The data
frame must contain the following columns: \code{id}, \code{label},
\code{x}, and \code{y}. An internal function will add the necessary
\code{row} column based on the values for \code{y}. See vignettes for
examples of the data frame structure.}
}
\value{
A list of five data frames:
\itemize{
\item \code{nodes}: A data frame containing the node (state variable) ids,
labels, and positions. Position is defined with the \code{x} and
\code{y} columns, which define the center of the node squares. The
ggplot2 function \code{geom_tile} is used for placement of nodes and
the height and width are set to 1 to generate a perfect square centered
on \code{x} and \code{y}. The \code{row} column indicates which row
the node is placed on; this is also evident from the \code{y} values.
\code{id} is a numeric id for the node, which shows up in the edge
data frames for defining connects (see below).

\item \code{horizontal_edges}: A data frame containing name and position
information for straight flows from one node to an adjacent node. The
data frame contains nine (9) columns:
\itemize{
\item{\code{to}}: The node id to which the arrow will point. That is, the node
receiving the flow.
\item{\code{from}}: The node id from which the arrow originate. That is, the
node donating the flow.
\item{\code{label}}: The label of the flow. Typically a mathematical expression.
\item{\code{xstart}}: The starting horizontal position of the arrow.
\item{\code{ystart}}: The starting veritcal position of the arrow.
\item{\code{xend}}: The ending horizontal position of the arrow.
\item{\code{yend}}: The ending vertical position of the arrow.
\item{\code{xmid}}: The horizontal midpoint of the arrow. Used for label
placement.
\item{\code{ymid}}: The vertical midpoint of the arrow. Used for label
placement.
}

\item \code{vertical_edges}: A data frame containing name and position
information for flows that arrive from out of the system or leave the
system. That is, flows that either (1) do not come from a node specified
in the nodes data frame or (2) exit the system without connecting to
another node. The data frame contains the same columns as
\code{horizontal_edges}. Note that either the \code{to} or \code{from}
value will be NA in each row (if rows are present). These flows arrive
or leave at 45 degree angles, despite the name of the data frame implying
a vertical entrance or exit.

\item {curved_edges}: A data frame containing name and position
information for, typically, two types of curved arrows: (1) interaction
arrows that point toward a horizontal arrow or (2) a physical flow
that would normally be a horizontal arrow but must bypass at least
one node. The data frame has eleven (11) columns:
\itemize{
\item{\code{to}}: The node id to which the arrow will point. That is, the node
receiving the flow.
\item{\code{from}}: The node id from which the arrow originate. That is, the
node donating the flow.
\item{\code{label}}: The label of the flow. Typically a mathematical expression.
\item{interaction}: A logical indicating whether the flow represents
an interaction between two or more nodes. If \code{TRUE}, the arrow
is drawn as dashed by default.
\item{\code{xstart}}: The starting horizontal position of the arrow.
\item{\code{ystart}}: The starting veritcal position of the arrow.
\item{\code{xend}}: The ending horizontal position of the arrow.
\item{\code{yend}}: The ending vertical position of the arrow.
\item{\code{curvature}}: The amount of curvature applied to arrow.
Higher numbers indicate more curvature; 0 = straight line.
\item{\code{row}}: The row on which the arrow is connecting nodes;
this is also evident from the \code{ystart} and \code{yend} values.
\item{\code{labelx}}: Horizontal position of label.
\item{\code{labely}}: Vertical position of label.
}

\item{\code{feedback_edges}}: A data frame containing name and position
information for arrows indicating a feedback into the same node. The
data frame contains the same columns as the \code{horizontal_edges}
data frame. Note that the \code{to} and \code{from} columns should have
the same values for feedback edges.

}
}
\description{
Create data frames for plotting from model elements.
}
\examples{
varlabels <- c("S","I","R")
varnames <- c("Susceptible","Infected","Recovered")  # optional
flows <- list(S_flows = c("-b*S*I"),
              I_flows = c("+b*S*I","-g*I"),
              R_flows = c("+g*I"))
mymodel <- list(varlabels = varlabels, varnames = varnames, flows = flows)
prepare_diagram(input_list = mymodel)

}
